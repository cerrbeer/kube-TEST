---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  labels:
    name: prometheus-rules
  namespace: monitoring
data:
  alert.rules: |-
    {{`
    groups:
    - name: example
      rules:

        # Alert for any instance that is unreachable for >5 minutes.
      - alert: InstanceDown
        expr: up == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Instance {{ $labels.instance }} {{ $labels.kubernetes_name}} is down"
          description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."
        # Alert for check Disk Space
      - alert: Low_disk
        expr: ((container_fs_limit_bytes{id="/"} - container_fs_usage_bytes{id="/"}) / container_fs_limit_bytes{id="/"} * 100) < `}}{{ .MONITORING.ALERT.THRESHOLD.FILE_SYSTEM_PERCENTAGE }}{{`
        for: 1m
        labels: 
          severity: critical
        annotations:
          summary: "{{$labels.instance}}: Low disk space"
          description: "{{$labels.instance}}: Free disk space low {{ $value }} %"
        # Alert for check CPU Load Average
      - alert: Load_average
        expr: sum (rate (container_cpu_usage_seconds_total{id="/"}[10m])) / sum (machine_cpu_cores) * 100 > 80
        for: 1m
        labels: 
          severity: warning
        annotations:
          summary: "{{$labels.instance}}: CPU Load Average"
          description: "{{$labels.instance}}: Load Average"      
        # Alert for check Free Memory
      - alert: Free_memory
        expr: ((container_spec_memory_limit_bytes{id="/"} - container_memory_working_set_bytes{id="/"} - container_memory_cache{id="/"}) / container_spec_memory_limit_bytes{id="/"} * 100) < `}}{{ .MONITORING.ALERT.THRESHOLD.FREE_MEMORY_PERCENTAGE }}{{`
        for: 1m
        labels: 
          severity: critical
        annotations:
          summary: "{{$labels.instance}}: Low Free Memory"
          description: "{{$labels.instance}}: Now free memory {{ $value }} %"	  
    `}}
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: prometheus-server
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      nodeSelector:
        kubernetes.io/hostname: k8s-node-1
      containers:
        - name: prometheus
          image: prom/prometheus:v2.3.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          env:
          - name: SPECIAL_LEVEL_KEY
            valueFrom:
              configMapKeyRef:
                name: prometheus-rules
                key: alert.rules
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
            - name: rules-volume
              mountPath: /etc/prometheus-rules
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf
        - name: rules-volume
          configMap:
            name: prometheus-rules
        - name: prometheus-storage-volume
          emptyDir: {}      
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '9090'

spec:
  selector:
    app: prometheus-server
  type: NodePort
  ports:
    - port: 8080
      targetPort: 9090
      nodePort: 30000   